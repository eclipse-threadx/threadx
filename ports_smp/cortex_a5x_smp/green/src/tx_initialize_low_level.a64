/**************************************************************************/
/*                                                                        */
/*       Copyright (c) Microsoft Corporation. All rights reserved.        */
/*                                                                        */
/*       This software is licensed under the Microsoft Software License   */
/*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
/*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
/*       and in the root directory of this software.                      */
/*                                                                        */
/**************************************************************************/


/**************************************************************************/
/**************************************************************************/
/**                                                                       */
/** ThreadX Component                                                     */
/**                                                                       */
/**   Initialize                                                          */
/**                                                                       */
/**************************************************************************/
/**************************************************************************/


/* #define TX_SOURCE_CODE  */


/* Include necessary system files.  */

/*
#include "tx_api.h"
#include "tx_initialize.h"
#include "tx_thread.h"
#include "tx_timer.h"
*/

    .global     _tx_thread_system_stack_ptr
    .global     _tx_initialize_unused_memory
    .global     _tx_thread_context_save
    .global     _tx_thread_context_restore
    .global     __ghsbegin_free_mem

#ifndef TX_PLATFORM_IRQ_MAX
#define TX_PLATFORM_IRQ_MAX        192           // Size of IRQ handlers table
#endif

    .global     _tx_platform_initialize_low_level
    .global     _tx_platform_irq_handlers

	  .text
    .align 3
/**************************************************************************/
/*                                                                        */
/*  FUNCTION                                               RELEASE        */
/*                                                                        */
/*    _tx_initialize_low_level                         Cortex-A5x-SMP/GHS */
/*                                                           6.1          */
/*  AUTHOR                                                                */
/*                                                                        */
/*    William E. Lamie, Microsoft Corporation                             */
/*                                                                        */
/*  DESCRIPTION                                                           */
/*                                                                        */
/*    This function is responsible for any low-level processor            */
/*    initialization, including setting up interrupt vectors, setting     */
/*    up a periodic timer interrupt source, saving the system stack       */
/*    pointer for use in ISR processing later, and finding the first      */
/*    available RAM memory address for tx_application_define.             */
/*                                                                        */
/*  INPUT                                                                 */
/*                                                                        */
/*    None                                                                */
/*                                                                        */
/*  OUTPUT                                                                */
/*                                                                        */
/*    None                                                                */
/*                                                                        */
/*  CALLS                                                                 */
/*                                                                        */
/*    None                                                                */
/*                                                                        */
/*  CALLED BY                                                             */
/*                                                                        */
/*    _tx_initialize_kernel_enter           ThreadX entry function        */
/*                                                                        */
/*  RELEASE HISTORY                                                       */
/*                                                                        */
/*    DATE              NAME                      DESCRIPTION             */
/*                                                                        */
/*  09-30-2020     William E. Lamie         Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
/* VOID   _tx_initialize_low_level(VOID)
{ */
    .global  _tx_initialize_low_level
    .type    _tx_initialize_low_level, @function
_tx_initialize_low_level:

    MSR     DAIFSet, 0x3                        // Lockout interrupts


    /* Save the system stack pointer.  */
    /* _tx_thread_system_stack_ptr = (VOID_PTR) (sp);  */

    LDR     x0, =_tx_thread_system_stack_ptr    // Pickup address of system stack ptr
    MOV     x1, sp                              // Pickup SP
    SUB     x1, x1, #15                         //
    AND     x1, x1, #~0xF                       // Get 16-bit alignment
    STR     x1, [x0]                            // Store system stack

    /* Save the first available memory address.  */
    /* _tx_initialize_unused_memory =  (VOID_PTR) _end;  */

    LDR     x0, =_tx_initialize_unused_memory   // Pickup address of unused memory ptr
    LDR     x1, =__ghsbegin_free_mem            // Pickup unused memory address - A free
    STR     x1, [x0]                            // Store unused memory address

    /* Call _tx_platform_initialize_low_level to initialize the interrupt controller and
       setup a timer for periodic interrupts. */

    STP     x29, x30, [sp, #-16]!
    BL      _tx_platform_initialize_low_level
    LDP     x29, x30, [sp], #16

    /* Done, return to caller.  */

    RET                                         // Return to caller
/* } */


/* IRQ Handler */
    .global __tx_irq_handler
__tx_irq_handler:

    STP     x29, x30, [sp, #-16]!
    BL      _tx_thread_context_save             // save system context

    STP     x20, x21, [sp, #-16]!               // save working registers

    // acknowledge the interrupt
    MRS     x20, S3_1_C15_C3_0                  // read CBAR
    ADD     x20, x20, #0x20000                  // CPU interface base address
    LDR     w21, [x20, #0xc]                    // read interrupt ID from GICC_IAR
    LDR     w0, =0x3ff
    AND     w1, w0, w21                         // keep only ACKINTID bits
    LDR     w0, =TX_PLATFORM_IRQ_MAX
    CMP     w1, w0
    B.GE    tx_irq_done                         // ignore spurious interrupts

    // call interrupt handler
    LDR     x2, =_tx_platform_irq_handlers      // irq_handlers table address
    ADD     x2, x2, w1, UXTW #4                 // irq_handlers + irq_id * 16
    LDR     x1, [x2]                            // handler
    LDR     x0, [x2, #8]                        // data
    BLR     x1                                  // call handler

tx_irq_done:
    // signal end of interrupt
    STR     w21, [x20, #0x10]                   // write interrupt ID to GICC_EOIR

    LDP     x20, x21, [sp], #16                 // restore working registers

    B       _tx_thread_context_restore          // restore system context
