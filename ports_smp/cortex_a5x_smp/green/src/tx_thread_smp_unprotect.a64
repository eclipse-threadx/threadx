/**************************************************************************/
/*                                                                        */
/*       Copyright (c) Microsoft Corporation. All rights reserved.        */
/*                                                                        */
/*       This software is licensed under the Microsoft Software License   */
/*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
/*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
/*       and in the root directory of this software.                      */
/*                                                                        */
/**************************************************************************/


/**************************************************************************/
/**************************************************************************/
/**                                                                       */ 
/** ThreadX Component                                                     */ 
/**                                                                       */
/**   Thread - Low Level SMP Support                                      */
/**                                                                       */
/**************************************************************************/
/**************************************************************************/


/*
#define TX_SOURCE_CODE
#define TX_THREAD_SMP_SOURCE_CODE
*/

/* Include necessary system files.  */

/*
#include "tx_api.h"
#include "tx_thread.h"
#include "tx_timer.h"
*/

	.text
	.align 3
/**************************************************************************/ 
/*                                                                        */ 
/*  FUNCTION                                               RELEASE        */ 
/*                                                                        */ 
/*    _tx_thread_smp_unprotect                         Cortex-A5x-SMP/GHS */ 
/*                                                           6.1          */
/*  AUTHOR                                                                */
/*                                                                        */
/*    William E. Lamie, Microsoft Corporation                             */
/*                                                                        */
/*  DESCRIPTION                                                           */
/*                                                                        */ 
/*    This function releases previously obtained protection. The supplied */ 
/*    previous SR is restored. If the value of _tx_thread_system_state    */ 
/*    and _tx_thread_preempt_disable are both zero, then multithreading   */ 
/*    is enabled as well.                                                 */ 
/*                                                                        */ 
/*  INPUT                                                                 */ 
/*                                                                        */ 
/*    Previous Status Register                                            */ 
/*                                                                        */ 
/*  OUTPUT                                                                */ 
/*                                                                        */ 
/*    None                                                                */
/*                                                                        */ 
/*  CALLS                                                                 */ 
/*                                                                        */ 
/*    None                                                                */
/*                                                                        */ 
/*  CALLED BY                                                             */ 
/*                                                                        */ 
/*    ThreadX Source                                                      */
/*                                                                        */ 
/*  RELEASE HISTORY                                                       */ 
/*                                                                        */ 
/*    DATE              NAME                      DESCRIPTION             */
/*                                                                        */
/*  09-30-2020     William E. Lamie         Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
    .global  _tx_thread_smp_unprotect
    .type    _tx_thread_smp_unprotect, @function
_tx_thread_smp_unprotect:
    MSR     DAIFSet, 0x3                        // Lockout interrupts
    LDR     x1,=_tx_thread_smp_protection       // Build address of protection structure
    MRS     x8, MPIDR_EL1                       // Pickup the core ID
    UBFX    x8, x8, #0, #8                      // Isolate and right justify core ID
    LDR     w2, [x1, #4]                        // Pickup the owning core
    CMP     w2, w8                              // Is it this core?
    B.NE    _still_protected                    // If this is not the owning core, protection is in force elsewhere

    LDR     w2, [x1, #8]                        // Pickup the protection count
    CMP     w2, #0                              // Check to see if the protection is still active
    B.EQ    _still_protected                    // If the protection count is zero, protection has already been cleared

    SUB     w2, w2, #1                          // Decrement the protection count
    STR     w2, [x1, #8]                        // Store the new count back
    CMP     w2, #0                              // Check to see if the protection is still active
    B.NE    _still_protected                    // If the protection count is non-zero, protection is still in force
    LDR     x2,=_tx_thread_preempt_disable      // Build address of preempt disable flag
    LDR     w3, [x2]                            // Pickup preempt disable flag
    CMP     w3, #0                              // Is the preempt disable flag set?
    B.NE    _still_protected                    // Yes, skip the protection release 
    MOV     x2, #0xFFFFFFFF                     // Build invalid value
    STR     w2, [x1, #4]                        // Mark the protected core as invalid
    DMB     ISH                                 // Ensure that accesses to shared resource have completed
    MOV     x2, #0                              // Build release protection value
    STR     w2, [x1, #0]                        // Release the protection
    DSB     ISH                                 // To ensure update of the protection occurs before other CPUs awake
#ifdef TX_ENABLE_WFE
    SEV                                         // Send event to other CPUs, wakes anyone waiting on the protection (using WFE)
#endif
_still_protected:
    SEV                                         // Send event to other CPUs
    MSR     DAIF, x0                            // Restore interrupt posture
    RET
    
