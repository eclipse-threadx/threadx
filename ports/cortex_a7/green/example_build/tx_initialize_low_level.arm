/**************************************************************************/
/*                                                                        */
/*       Copyright (c) Microsoft Corporation. All rights reserved.        */
/*                                                                        */
/*       This software is licensed under the Microsoft Software License   */
/*       Terms for Microsoft Azure RTOS. Full text of the license can be  */
/*       found in the LICENSE file at https://aka.ms/AzureRTOS_EULA       */
/*       and in the root directory of this software.                      */
/*                                                                        */
/**************************************************************************/


/**************************************************************************/
/**************************************************************************/
/**                                                                       */ 
/** ThreadX Component                                                     */ 
/**                                                                       */
/**   Initialize                                                          */
/**                                                                       */
/**************************************************************************/
/**************************************************************************/


/* #define TX_SOURCE_CODE  */


/* Include necessary system files.  */

/*  #include "tx_api.h"
    #include "tx_initialize.h"
    #include "tx_thread.h"
    #include "tx_timer.h"  */

    SVC_MODE        =   0xD3                    # Disable IRQ/FIQ SVC mode
    IRQ_MODE        =   0xD2                    # Disable IRQ/FIQ IRQ mode
    FIQ_MODE        =   0xD1                    # Disable IRQ/FIQ FIQ mode
    SYS_MODE        =   0xDF                    # Disable IRQ/FIQ SYS mode
    MODE_MASK       =   0x1F                    # Mode mask
    FIQ_STACK_SIZE  =   512                     # FIQ stack size
    IRQ_STACK_SIZE  =   1024                    # IRQ stack size
    SYS_STACK_SIZE  =   1024                    # SYS stack size

    .text
    .align  4
/**************************************************************************/ 
/*                                                                        */ 
/*  FUNCTION                                               RELEASE        */ 
/*                                                                        */ 
/*    _tx_initialize_low_level                      Cortex-A7/Green Hills */ 
/*                                                           6.1          */
/*  AUTHOR                                                                */
/*                                                                        */
/*    William E. Lamie, Microsoft Corporation                             */
/*                                                                        */
/*  DESCRIPTION                                                           */
/*                                                                        */ 
/*    This function is responsible for any low-level processor            */ 
/*    initialization, including setting up interrupt vectors, setting     */ 
/*    up a periodic timer interrupt source, saving the system stack       */ 
/*    pointer for use in ISR processing later, and finding the first      */ 
/*    available RAM memory address for tx_application_define.             */ 
/*                                                                        */ 
/*  INPUT                                                                 */ 
/*                                                                        */ 
/*    None                                                                */ 
/*                                                                        */ 
/*  OUTPUT                                                                */ 
/*                                                                        */ 
/*    None                                                                */ 
/*                                                                        */ 
/*  CALLS                                                                 */ 
/*                                                                        */ 
/*    None                                                                */ 
/*                                                                        */ 
/*  CALLED BY                                                             */ 
/*                                                                        */ 
/*    _tx_initialize_kernel_enter           ThreadX entry function        */ 
/*                                                                        */ 
/*  RELEASE HISTORY                                                       */ 
/*                                                                        */ 
/*    DATE              NAME                      DESCRIPTION             */
/*                                                                        */
/*  09-30-2020     William E. Lamie         Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
/* VOID   _tx_initialize_low_level(VOID)
{  */
    .globl  _tx_initialize_low_level
_tx_initialize_low_level:

    /****** NOTE ****** We must be in SVC MODE at this point.  Some monitors
       enter this routine in USER mode and require a software interrupt to
       change into SVC mode.  */

    /* Save the system stack pointer.  */
    /* _tx_thread_system_stack_ptr = (VOID_PTR) (sp);  */

    LDR     r1,=_tx_thread_system_stack_ptr     # Pickup address of system stack ptr
    STR     sp, [r1]                            # Save system stack 

    /* Pickup the first available memory address.  */

    LDR     r0,=__ghsbegin_free_mem             # Pickup free memory address

    /* Setup initial stack pointers for IRQ and FIQ modes.  */

    MRS     r12, CPSR                           # Pickup current CPSR
    MOV     r1, r0                              # Get first available memory
#ifdef TX_ENABLE_IRQ_NESTING
    /* Setup the system mode stack for nested interrupt support  */
    LDR     r2, =SYS_STACK_SIZE                 # Pickup stack size
    BIC     r3, r12, MODE_MASK                  # Clear mode bits
    ORR     r3, r3, SYS_MODE                    # Build SYS mode CPSR
    MSR     CPSR_c, r3                          # Enter SYS mode
    ADD     r1, r1, r2                          # Calculate start of SYS stack
    SUB     r1, r1, 1                           # Backup one byte
    BIC     r1, r1, 7                           # Insure 8-byte alignment
    MOV     sp, r1                              # Setup SYS stack pointer
#endif
    LDR     r2, =FIQ_STACK_SIZE                 # Pickup stack size
    BIC     r3, r12, MODE_MASK                  # Clear mode bits
    ORR     r3, r3, FIQ_MODE                    # Build FIQ mode CPSR
    MSR     CPSR_c, r3                          # Enter FIQ mode
    ADD     r1, r1, r2                          # Calculate start of FIQ stack
    SUB     r1, r1, 1                           # Backup one byte
    BIC     r1, r1, 7                           # Insure 8-byte alignment
    MOV     sp, r1                              # Setup FIQ stack pointer
    MOV     r10, 0                              # Clear sl
    MOV     r11, 0                              # Clear fp
    LDR     r2, =IRQ_STACK_SIZE                 # Pickup IRQ (system stack size)
    BIC     r3, r12, MODE_MASK                  # Clear mode bits
    ORR     r3, r3, IRQ_MODE                    # Build IRQ mode CPSR
    MSR     CPSR_c, r3                          # Enter IRQ mode
    ADD     r1, r1, r2                          # Calculate start of IRQ stack
    SUB     r1, r1, 1                           # Backup one byte
    BIC     r1, r1, 7                           # Insure 8-byte alignment
    MOV     sp, r1                              # Setup IRQ stack pointer
    MSR     CPSR_c, r12                         # Restore previous mode
    ADD     r0, r1, 4                           # Adjust the new free memory


    /* Save the first available memory address.  */
    /* _tx_initialize_unused_memory =  (VOID_PTR) __ghsbegin_free_mem + [SYS_STACK] + FIQ_STACK + IRQ_STACK;  */

    LDR     r2,=_tx_initialize_unused_memory    # Pickup unused memory ptr address
    STR     r0, [r2]                            # Save first free memory address


    /* Setup Timer for periodic interrupts.  To generate timer interrupts with 
       the Green Hills simulator, enter the following command in the target 
       window:        timer 9999 irq         */

    /* Done, return to caller.  */

    RET                                         # Return to caller

    .type _tx_initialize_low_level,$function
    .size _tx_initialize_low_level,.-_tx_initialize_low_level
/* }  */


/* Define shells for each of the interrupt vectors.  */

    .globl  __tx_undefined
__tx_undefined:
    B       __tx_undefined                      # Undefined handler

    .type __tx_undefined,$function
    .size __tx_undefined,.-__tx_undefined

    .globl  __tx_swi_interrupt
__tx_swi_interrupt:
    B       __tx_swi_interrupt                  # Software interrupt handler

    .type __tx_swi_interrupt,$function
    .size __tx_swi_interrupt,.-__tx_swi_interrupt

    .globl  __tx_prefetch_handler
__tx_prefetch_handler:
    B       __tx_prefetch_handler               # Prefetch exception handler

    .type __tx_prefetch_handler,$function
    .size __tx_prefetch_handler,.-__tx_prefetch_handler

    .globl  __tx_abort_handler
__tx_abort_handler:
    B       __tx_abort_handler                  # Abort exception handler

    .type __tx_abort_handler,$function
    .size __tx_abort_handler,.-__tx_abort_handler

    .globl  __tx_reserved_handler
__tx_reserved_handler:
    B       __tx_reserved_handler               # Reserved exception handler

    .type __tx_reserved_handler,$function
    .size __tx_reserved_handler,.-__tx_reserved_handler

    .globl  __tx_irq_handler
    .globl  __tx_irq_processing_return      
__tx_irq_handler:

    /* Jump to context save to save system context.  */
    B       _tx_thread_context_save

    .type __tx_irq_handler,$function
    .size __tx_irq_handler,.-__tx_irq_handler

__tx_irq_processing_return:

    /* At this point execution is still in the IRQ mode.  The CPSR, point of
       interrupt, and all C scratch registers are available for use.  */ 

#ifdef  TX_ENABLE_EVENT_LOGGING
    MOV     r0, 0                               # Build interrupt code
    BL      _tx_el_interrupt                    # Call interrupt event logging
#endif

    /* Interrupt nesting is allowed after calling _tx_thread_irq_nesting_start 
       from IRQ mode with interrupts disabled.  This routine switches to the
       system mode and returns with IRQ interrupts enabled.  
       
       NOTE:  It is very important to ensure all IRQ interrupts are cleared 
       prior to enabling nested IRQ interrupts.  */
#ifdef TX_ENABLE_IRQ_NESTING
    BL      _tx_thread_irq_nesting_start
#endif


    /* For debug purpose, execute the timer interrupt processing here.  In
       a real system, some kind of status indication would have to be checked
       before the timer interrupt handler could be called.  */
    BL      _tx_timer_interrupt                 # Timer interrupt handler

    /* Application IRQ handlers can be called here!  */

    /* If interrupt nesting was started earlier, the end of interrupt nesting
       service must be called before returning to _tx_thread_context_restore.  
       This routine returns in processing in IRQ mode with interrupts disabled.  */
#ifdef TX_ENABLE_IRQ_NESTING
    BL      _tx_thread_irq_nesting_end
#endif

#ifdef  TX_ENABLE_EVENT_LOGGING
    MOV     r0, 0                               # Build interrupt code
    BL      _tx_el_interrupt_end                # Call interrupt event logging
#endif

    /* Jump to context restore to restore system context.  */
    B       _tx_thread_context_restore

    .type __tx_irq_processing_return,$function
    .size __tx_irq_processing_return,.-__tx_irq_processing_return

#ifdef TX_ENABLE_FIQ_SUPPORT

    .globl  __tx_fiq_handler
    .globl  __tx_fiq_processing_return
__tx_fiq_handler:
    /* Jump to fiq context save to save system context.  */
    B       _tx_thread_fiq_context_save

    .type __tx_fiq_handler,$function
    .size __tx_fiq_handler,.-__tx_fiq_handler

__tx_fiq_processing_return:

    /* At this point execution is still in the FIQ mode.  The CPSR, point of
       interrupt, and all C scratch registers are available for use.  */

#ifdef  TX_ENABLE_EVENT_LOGGING
    MOV     r0, 1                               # Build interrupt code
    BL      _tx_el_interrupt                    # Call interrupt event logging
#endif
       
    /* Interrupt nesting is allowed after calling _tx_thread_fiq_nesting_start 
       from FIQ mode with interrupts disabled.  This routine switches to the
       system mode and returns with FIQ interrupts enabled.

       NOTE:  It is very important to ensure all FIQ interrupts are cleared 
       prior to enabling nested FIQ interrupts.  */
#ifdef TX_ENABLE_FIQ_NESTING
    BL      _tx_thread_fiq_nesting_start
#endif

    /* Application FIQ handlers can be called here!  */

    /* If interrupt nesting was started earlier, the end of interrupt nesting
       service must be called before returning to _tx_thread_fiq_context_restore.  */
#ifdef TX_ENABLE_FIQ_NESTING
    BL      _tx_thread_fiq_nesting_end
#endif

#ifdef  TX_ENABLE_EVENT_LOGGING
    MOV     r0, 1                               # Build interrupt code
    BL      _tx_el_interrupt_end                # Call interrupt event logging
#endif

    /* Jump to fiq context restore to restore system context.  */
    B       _tx_thread_fiq_context_restore

    .type __tx_fiq_processing_return,$function
    .size __tx_fiq_processing_return,.-__tx_fiq_processing_return

#else
    .globl  __tx_fiq_handler
__tx_fiq_handler:
    B       __tx_fiq_handler                    # FIQ interrupt handler

    .type __tx_fiq_handler,$function
    .size __tx_fiq_handler,.-__tx_fiq_handler
#endif

    /* Reference build options and version ID to ensure they come in.  */

BUILD_OPTIONS:
    .data.w _tx_build_options
VERSION_ID:
    .data.w _tx_version_id
